// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_body_vel_h
 *
 * Args:
 *     state: Matrix25_1
 *
 * Outputs:
 *     Hx: Matrix24_1
 *     Hy: Matrix24_1
 *     Hz: Matrix24_1
 */
template <typename Scalar>
void ComputeBodyVelH(const matrix::Matrix<Scalar, 25, 1>& state,
                     matrix::Matrix<Scalar, 24, 1>* const Hx = nullptr,
                     matrix::Matrix<Scalar, 24, 1>* const Hy = nullptr,
                     matrix::Matrix<Scalar, 24, 1>* const Hz = nullptr) {
  // Total ops: 138

  // Input arrays

  // Intermediate terms (46)
  const Scalar _tmp0 = 2 * state(5, 0);
  const Scalar _tmp1 = _tmp0 * state(3, 0);
  const Scalar _tmp2 = 2 * state(2, 0);
  const Scalar _tmp3 = _tmp2 * state(6, 0);
  const Scalar _tmp4 = _tmp1 - _tmp3;
  const Scalar _tmp5 = (Scalar(1) / Scalar(2)) * state(1, 0);
  const Scalar _tmp6 = _tmp2 * state(5, 0);
  const Scalar _tmp7 = 2 * state(6, 0);
  const Scalar _tmp8 = _tmp7 * state(3, 0);
  const Scalar _tmp9 = _tmp6 + _tmp8;
  const Scalar _tmp10 = (Scalar(1) / Scalar(2)) * state(0, 0);
  const Scalar _tmp11 = 4 * state(4, 0);
  const Scalar _tmp12 = _tmp0 * state(0, 0);
  const Scalar _tmp13 = 2 * state(1, 0);
  const Scalar _tmp14 = _tmp13 * state(6, 0);
  const Scalar _tmp15 = -_tmp11 * state(3, 0) + _tmp12 + _tmp14;
  const Scalar _tmp16 = (Scalar(1) / Scalar(2)) * state(2, 0);
  const Scalar _tmp17 = _tmp0 * state(1, 0);
  const Scalar _tmp18 = _tmp7 * state(0, 0);
  const Scalar _tmp19 = -_tmp11 * state(2, 0) + _tmp17 - _tmp18;
  const Scalar _tmp20 = (Scalar(1) / Scalar(2)) * state(3, 0);
  const Scalar _tmp21 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp22 = -2 * std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp23 = 1 - 2 * std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp24 = 2 * state(0, 0) * state(3, 0);
  const Scalar _tmp25 = _tmp2 * state(1, 0);
  const Scalar _tmp26 = _tmp2 * state(0, 0);
  const Scalar _tmp27 = _tmp13 * state(3, 0);
  const Scalar _tmp28 = 2 * state(4, 0);
  const Scalar _tmp29 = _tmp28 * state(3, 0);
  const Scalar _tmp30 = _tmp14 - _tmp29;
  const Scalar _tmp31 = _tmp28 * state(1, 0);
  const Scalar _tmp32 = _tmp31 + _tmp8;
  const Scalar _tmp33 = _tmp28 * state(0, 0);
  const Scalar _tmp34 = 4 * state(5, 0);
  const Scalar _tmp35 = _tmp3 - _tmp33 - _tmp34 * state(3, 0);
  const Scalar _tmp36 = _tmp2 * state(4, 0);
  const Scalar _tmp37 = _tmp18 - _tmp34 * state(1, 0) + _tmp36;
  const Scalar _tmp38 = -2 * std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp39 = _tmp2 * state(3, 0);
  const Scalar _tmp40 = _tmp13 * state(0, 0);
  const Scalar _tmp41 = _tmp31 + _tmp6;
  const Scalar _tmp42 = -_tmp17 + _tmp36;
  const Scalar _tmp43 = 4 * state(6, 0);
  const Scalar _tmp44 = -_tmp12 + _tmp29 - _tmp43 * state(1, 0);
  const Scalar _tmp45 = _tmp1 + _tmp33 - _tmp43 * state(2, 0);

  // Output terms (3)
  if (Hx != nullptr) {
    matrix::Matrix<Scalar, 24, 1>& _hx = (*Hx);

    _hx.setZero();

    _hx(0, 0) = _tmp10 * _tmp9 + _tmp15 * _tmp16 - _tmp19 * _tmp20 - _tmp4 * _tmp5;
    _hx(1, 0) = _tmp10 * _tmp19 - _tmp16 * _tmp4 + _tmp20 * _tmp9 - _tmp21 * state(1, 0);
    _hx(2, 0) = -_tmp16 * _tmp9 + _tmp19 * _tmp5 - _tmp20 * _tmp4 + _tmp21 * state(0, 0);
    _hx(3, 0) = _tmp22 + _tmp23;
    _hx(4, 0) = _tmp24 + _tmp25;
    _hx(5, 0) = -_tmp26 + _tmp27;
  }

  if (Hy != nullptr) {
    matrix::Matrix<Scalar, 24, 1>& _hy = (*Hy);

    _hy.setZero();

    _hy(0, 0) = _tmp10 * _tmp37 + _tmp16 * _tmp35 - _tmp20 * _tmp32 - _tmp30 * _tmp5;
    _hy(1, 0) = _tmp10 * _tmp32 - _tmp16 * _tmp30 + _tmp20 * _tmp37 - _tmp35 * _tmp5;
    _hy(2, 0) = _tmp10 * _tmp35 - _tmp16 * _tmp37 - _tmp20 * _tmp30 + _tmp32 * _tmp5;
    _hy(3, 0) = -_tmp24 + _tmp25;
    _hy(4, 0) = _tmp22 + _tmp38 + 1;
    _hy(5, 0) = _tmp39 + _tmp40;
  }

  if (Hz != nullptr) {
    matrix::Matrix<Scalar, 24, 1>& _hz = (*Hz);

    _hz.setZero();

    _hz(0, 0) = _tmp10 * _tmp44 + _tmp16 * _tmp41 - _tmp20 * _tmp45 - _tmp42 * _tmp5;
    _hz(1, 0) = _tmp10 * _tmp45 - _tmp16 * _tmp42 + _tmp20 * _tmp44 - _tmp41 * _tmp5;
    _hz(2, 0) = _tmp10 * _tmp41 - _tmp16 * _tmp44 - _tmp20 * _tmp42 + _tmp45 * _tmp5;
    _hz(3, 0) = _tmp26 + _tmp27;
    _hz(4, 0) = _tmp39 - _tmp40;
    _hz(5, 0) = _tmp23 + _tmp38;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
